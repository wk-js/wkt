/// <reference types="node" />
import { API } from "../api";
import { AssetItemRules } from 'asset-pipeline/js/asset-pipeline';
import { TemplateOptions } from "lodash";
export declare class FileAPI extends API {
    /**
     * Data shared between all bunldes
     */
    readonly data: object;
    /**
     * Get an array of every asset-pipeline generated by bundles
     */
    readonly assets: any;
    /**
     * Chunk shared between all bunldes
     */
    readonly chunk_stack: any;
    /**
     * Get the asset pipeline of the active bundle
     */
    readonly asset: any;
    init(): void;
    bundle(): any;
    private _copyAndRender();
    /**
     * Copy files
     */
    private bundle_copy();
    /**
     * Render files and edit them
     */
    private bundle_render();
    helpers(): {
        addFile: (glob: string, parameters?: AssetItemRules | undefined) => void;
        ignoreFile: (glob: string) => void;
        addDirectory: (glob: string, parameters?: AssetItemRules | undefined) => void;
        ignoreDirectory: (glob: string) => void;
        editFile: (glob: string, callback: (value: string | Buffer) => string | Buffer) => void;
        templateFile: (glob: string, template?: boolean | object | undefined) => void;
        templateData: (data: object, options?: TemplateOptions | undefined) => object;
        chunk: () => any;
    };
    addFile(glob: string, parameters?: AssetItemRules): void;
    ignoreFile(glob: string): void;
    addDirectory(glob: string, parameters?: AssetItemRules): void;
    ignoreDirectory(glob: string): void;
    templateFile(glob: string, template?: object | boolean): void;
    templateData(data: object, options?: TemplateOptions): object;
    editFile(glob: string, callback: (value: Buffer | string) => Buffer | string): void;
    chunk(): any;
}
