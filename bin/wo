#!/usr/bin/env node
'use strict'

// const bps = [ '_default', 'assets', 'git', 'i18n', 'environments', 'package', 'webpack', 'templates' ]

// const Resolver = new (require('./lib/resolver'))

// bps.forEach(function(bp) {
//   Resolver.boilerplate( bp )
// })

// Resolver.make('./tmp')

const Resolver = require('../lib/resolver')
const wk = require('workflow-cli')
const { Result } = require('wk-argv-parser')

function Command() {
  this

  .string('destination', process.cwd())
  .alias('destination', [ '-o', '-d' ])
  .required('destination', 'No destination found!')

  .string('boilerplate')
  .validate('boilerplate', function(value) {
    try {
      return Resolver.resolve(value)
    } catch(e) {}

    return false
  })
  .required('boilerplate', 'No boilerplate found!')
}

wk.namespace('boilerplate', function() {

  wk.desc('boilerplate')
  wk.task('default', {
    command: Command,
    async: true
  }, function(resolve, reject) {

    const res = new Result
    res.set( process.argv.slice(2).join(' ') )
    res.set( this.argv )

    wk.run(`boilerplate:execute ${res.toArray().slice(1).join(' ')}`)
      .then( resolve )
      .catch( reject )
  })

  wk.desc('execute boilerplate')
  wk.task('execute', function() {

    const resolver = new Resolver
    resolver.boilerplate( this.argv.boilerplate )
    resolver.make( this.argv.destination )

  })

})

wk.run(`boilerplate ${process.argv.slice(2).join(' ')}`)