#!/usr/bin/env node
'use strict'

const { API, Boilerplate } = require('../lib')
const { Parser }           = require('wk-argv-parser')
const { join }             = require('path')

const { result, errors } = Parser.command('boilerplate')

// --output, -o
.string('output', process.cwd())
.alias('output', [ 'o' ])
.describe('output', `Add output (default: "${process.cwd()}")`)

// --help, -h
.help()

// Parse arguments
.parse(process.argv.slice(2).join(' '))

// Display help
if (result.params.help) {
  console.log(basename(__filename), result.config.help.description)
  return
}

// Errors
if (errors) {
  const errors_str = errors.map((err) => {
    return `${err.message} [missings: ${err.missings.join(', ')}]`
  }).join('\n')

  console.log(errors_str)
  return
}

global.$api = Object.assign({}, API)
global.$bp  = {
  get current() {
    return Boilerplate.current()
  }
}

result.config = null
result.set( result.valid_params )

result.params._.forEach((file) => {

  Boilerplate.create(file)

  // try {
  //   require(join(process.cwd(), file))
  // } catch(e) {
  //   console.log(`Error in file "${file}"`)
  // }
})