#!/usr/bin/env node
'use strict'

const Manager            = require('../lib/manager')
const { basename, join } = require('path')
const { Parser }         = require('wk-argv-parser')

const { result, errors } = Parser.command('boilerplate')

// --output, -o
.string('output', process.cwd())
.alias('output', [ 'o' ])
.describe('output', `Add output (default: "${process.cwd()}")`)

// --list, -l
.boolean('list', false)
.alias('list', [ 'l' ])
.describe('list', 'List boilerplates (default: false)')

// --workflow, -w
.string('workflow', 'renderer')
.alias('workflow', [ 'w' ])
.describe('workflow', 'Set a boilerplate workflow path (default: "boilerplate/lib/workflows/renderer/index.js")')

// --generate, -g
.boolean('generate', false)
.alias('generate', [ 'g' ])
.describe('generate', 'Generate boilerplate')

// --skip, -s
.array('skip', [], true)
.alias('skip', [ 's' ])
.describe('skip', 'Skip module initialization')

// --help, -h
.help()

// Parse arguments
.parse(process.argv.slice(2).join(' '))

if (result.params.help) {
  console.log(basename(__filename), result.config.help.description)
} else if (errors) {

  const errors_str = errors.map((err) => {
    return `${err.message} [missings: ${err.missings.join(', ')}]`
  }).join('\n')

  console.log(errors_str)

} else {

  result.config = null
  result.set( result.valid_params )

  const manager = new Manager( result.params )

  let workflow = join(`${__dirname}/../lib/workflows/renderer`)

  if (result.params.list) {
    workflow = join(`${__dirname}/../lib/workflows/list`)
  }

  manager.add( workflow )

  if (result.params.generate) {
    manager.add( join(`${__dirname}/../lib/boilerplates/simple_template`) )
  }

  result.params._.forEach(bp => manager.add(bp))

  manager.execute()

}